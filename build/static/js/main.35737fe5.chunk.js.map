{"version":3,"sources":["header.js","Field.js","Square.js","Battle.js","App.js","index.js"],"names":["Header","className","title","this","props","description","React","Component","Field","listOfShips","arraySquares","list","wasAlreadyShoot","index1","index2","state","arraySquare","type","arraySquareLength","listOfPlacesShips","needClick","index","length","placeForShip","randomPlace","stopIndex1","stopIndex2","shipPosition","startX","startY","startIndex1","startIndex2","setState","push","getRandom","checkPositionShip","max","Math","floor","random","event","id","split","changeTurn","setTimeout","computerStep","computerStepEnd","checkRandomShoot","randomShoot","positionShips","listSquares1","indexes","map","row","indexrow","item","findID","value","wasShoot","shootShip","undefined","bind","createSquares","Square","key","e","alert","nextProps","src","onClick","handleClick","Battle","formIsActive","whoseTurn","userFullName","computerFullName","fields","console","log","stopPropagation","target","preventDefault","who","strHi","htmlFor","placeholder","onChange","userFullnameOnChange","computerFullnameOnChange","name","readNames","App","battle","newGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35737fe5.chunk.js","sourcesContent":["import React from 'react';\r\nexport class Header extends React.Component {\r\n        //   <img className=\"information__logo\" src=\"img/logo.jpg\" alt=\"Логотип\"/>\r\n    render() {\r\n        return  <div className  =\"information\">\r\n                        \r\n                        <div className=\"information__title title\" title={this.props.title}>{this.props.title}</div>\r\n                        <div className=\"information__subtitle\" title={this.props.description}>{this.props.description}</div>\r\n                </div>\r\n        }\r\n}","import React from 'react';\r\nimport {Square} from './componentsLib.js';\r\nexport class Field extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.listOfShips = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];\r\n        let arrayLength = 10;\r\n        let arraySquares = [];\r\n        let list = [];\r\n        this.wasAlreadyShoot = [];\r\n        //создаем изначальный массив клеток\r\n        // value = 0 - состояние не определено\r\n        // 1 - занята кораблем\r\n        // 2 - не может быть занята потому что рядом с кораблем\r\n        for (let index1 = 0; index1 < arrayLength; index1++){\r\n            arraySquares[index1] = [];\r\n            this.wasAlreadyShoot[index1] = [];\r\n            list[index1]=[];\r\n            for (var index2 = 0; index2 < arrayLength; index2++){\r\n                arraySquares[index1][index2] = 0;\r\n                this.wasAlreadyShoot[index1][index2] = false;\r\n            } \r\n        }\r\n        this.state = {\r\n            listOfShips: this.listOfShips,\r\n            arraySquare: arraySquares,\r\n            type: this.props.type,\r\n            arraySquareLength: arrayLength,\r\n            listOfPlacesShips: list,\r\n            needClick: this.props.needClick\r\n        }    \r\n    }\r\n    \r\n    /**\r\n     * Функция для расстановки кораблей\r\n     */\r\n    positionShips(){\r\n        for (let index = 0; index < this.listOfShips.length; index++){\r\n            let placeForShip = this.randomPlace(index);\r\n            //2-ки - это окружение кораблей. Расставляем 2-ки\r\n            let stopIndex1 = 0, stopIndex2 = 0;\r\n            if (placeForShip.shipPosition == 1) {//если вертикально\r\n                stopIndex1 = (placeForShip.startX + this.listOfShips[index] >= 9) ? 9 : (placeForShip.startX + this.listOfShips[index]); //проверяем до этого индекса\r\n                stopIndex2 = (placeForShip.startY + 1 >= 9) ? 9 : (placeForShip.startY + 1);\r\n            }\r\n            else { //если горизонтально\r\n                stopIndex1 = (placeForShip.startX + 1 >= 9) ? 9 : (placeForShip.startX + 1); //проверяем до этого индекса\r\n                stopIndex2 = (placeForShip.startY + this.listOfShips[index] >= 9) ? 9 : (placeForShip.startY + this.listOfShips[index]);\r\n            }\r\n            // console.log(this.state.arraySquare);\r\n            let startIndex1 = (placeForShip.startX == 0) ? 0 : placeForShip.startX - 1; //проверяем с этого индекса\r\n            let startIndex2 = (placeForShip.startY == 0) ? 0 : placeForShip.startY - 1;\r\n            for (let index1 = startIndex1; index1 <= stopIndex1; index1++)  {                                              \r\n                for (let index2 = startIndex2; index2 <= stopIndex2; index2++)  {                                        \r\n                    this.state.arraySquare[index1][index2] = 2;\r\n                    this.setState({arraySquare: this.state.arraySquare});\r\n                }\r\n            }\r\n            //1-цы - это корабли. Расставляем 1цы\r\n            if (placeForShip.shipPosition == 1){ //вертикально корабль стоит\r\n                for (let index1 = placeForShip.startX; index1 < (placeForShip.startX + this.state.listOfShips[index]); index1++){ //было -1\r\n                    // console.log(index1);\r\n                    this.state.arraySquare[index1][placeForShip.startY] = 1;\r\n                    //заодно заполняем массив с индексами мест, где стоят корабли\r\n                    this.state.listOfPlacesShips[index].push(`${index1}x${placeForShip.startY}`);\r\n                    this.setState({arraySquare: this.state.arraySquare, listOfPlacesShips: this.state.listOfPlacesShips});\r\n                }\r\n            }\r\n            else { //горизонтально корабль стоит\r\n                for (let index1 = placeForShip.startY; index1 < (placeForShip.startY + this.state.listOfShips[index]); index1++){ //было -1\r\n                    // console.log(index1);\r\n                    this.state.arraySquare[placeForShip.startX][index1] = 1;\r\n                    this.state.listOfPlacesShips[index].push(`${placeForShip.startX}x${index1}`);\r\n                    this.setState({arraySquare: this.state.arraySquare, listOfPlacesShips: this.state.listOfPlacesShips});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Функция создания случайного места для корабля\r\n     * @param {Number} index - индекс в массиве this.state.listOfShips\r\n     */\r\n    randomPlace(index){\r\n        let startX = 0;\r\n        let startY = 0;\r\n            let shipPosition = this.getRandom(1); //1 - вертикально, 0 - горизонтально\r\n            if (shipPosition == 0){             //если ставим корабль горизонтально\r\n                startX = this.getRandom(9);\r\n                startY = this.getRandom(9- this.listOfShips[index]);\r\n            }\r\n            else {                                //если ставим корабль вертикально\r\n                startX = this.getRandom(9 - this.listOfShips[index]);\r\n                startY = this.getRandom(9);\r\n            }\r\n            let SquaresIsFree = this.checkPositionShip(index, startX, startY, shipPosition);\r\n            if (SquaresIsFree){                 //место подходит, надо брать\r\n                let params = {\r\n                    startX: startX,\r\n                    startY: startY,\r\n                    shipPosition: shipPosition\r\n                }\r\n                return params;\r\n            }\r\n            else {                              //заново рандомим место\r\n                return this.randomPlace(index);\r\n            }\r\n    }\r\n    /**\r\n     * Функция проверки, станет ли в сгенерированное случайно место корабль\r\n     * @param {*} index - индекс в массиве this.state.listOfShips\r\n     * @param {*} startX сгенерированный индекс строки для вставки\r\n     * @param {*} startY сгенерированный индекс столбца для вставки\r\n     * @param {*} shipPosition сгенерированное направление для вставки\r\n     */\r\n    checkPositionShip(index, startX, startY, shipPosition){\r\n        let startIndex1 = (startX == 0) ? 0 : startX - 1; //индекс начала проверки\r\n        let startIndex2 = (startY == 0) ? 0 : startY - 1;\r\n        let stopIndex1 = 0, stopIndex2 = 0;\r\n        if (shipPosition == 1) {//если вертикально\r\n            stopIndex1 = ((startX + this.listOfShips[index]) >= 9) ? 9 : (startX + this.listOfShips[index]);  //индекс конца проверки\r\n            stopIndex2 = ((startY + 1) >= 9) ? 9 : (startY + 1);\r\n        }\r\n        else { //если горизонтально\r\n            stopIndex1 = ((startX + 1) >= 9) ? 9 : (startX + 1); \r\n            stopIndex2 = ((startY + this.listOfShips[index]) >= 9) ? 9 : (startY + this.listOfShips[index]); //индекс конца проверки\r\n        }\r\n        for (let index1 = startIndex1; index1 <= stopIndex1; index1++)                                              \r\n            for (let index2 = startIndex2; index2 <= stopIndex2; index2++)  {                                        \r\n                if(this.state.arraySquare[index1][index2] == 1){\r\n                    return false;\r\n                }\r\n            }\r\n        return true;\r\n    }\r\n    /**\r\n     * Функция для генерации случайного числа в диапазоне от 0 до max\r\n     * @param {*} max верхняя граница диапазона\r\n     */\r\n    getRandom(max) {\r\n        return Math.floor(Math.random() * (max + 1));\r\n    }\r\n    /**\r\n     * Функция вызывается в случае, если пользователь \"выстрелил\" по полю компьютера\r\n     * @param {*} event событие клика\r\n     * @param {*} id id элемента, по которому произошел клик    \r\n     */\r\n    shootShip(event, id){ \r\n        let arrId = id.split('x', 2); //мы бы привязали эту позицию к компоненту корабля, если б он у нас был\r\n        if (this.state.type=='computer'){ //эта функция вызывается только из поля компьютера\r\n            this.props.changeTurn('computer');\r\n            setTimeout(()=>this.props.computerStep(event), 1000);\r\n            // this.props.computerStep(event);\r\n        }\r\n        else { // НЕ БЫЛО\r\n            this.props.changeTurn('player'); // НЕ БЫЛО\r\n            \r\n            this.props.computerStepEnd(); // НЕ БЫЛО\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Функция генерации случайного места для выстрела компьютера\r\n     */\r\n    randomShoot(){\r\n        let index1 = this.getRandom(9);\r\n        let index2 = this.getRandom(9);\r\n        // console.log(1);\r\n        if (this.checkRandomShoot(index1,index2)){\r\n            this.wasAlreadyShoot[index1][index2] = true;\r\n            let params = {\r\n                index1: index1,\r\n                index2: index2\r\n            }\r\n            return params;\r\n        }\r\n        else return this.randomShoot();\r\n    }\r\n    /**\r\n     * функция для проверки, не стрелял ли еще компьютер по этому полю\r\n     * @param {*} index1 индекс по строке\r\n     * @param {*} index2 индекс по столбцу\r\n     */\r\n    checkRandomShoot(index1,index2){\r\n        if (this.wasAlreadyShoot[index1][index2]==false){\r\n            return true;\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        this.positionShips();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {    \r\n        this.setState({needClick: props.needClick});    \r\n        // this.setState({listSquare: this.createSquares()}); //раньше было так, но браузер стрелял дуплетом тогда\r\n\r\n    }    \r\n\r\n    /**\r\n     * Функция для создания блоков Square для вставки\r\n     */\r\n    createSquares(){\r\n        let listSquares1 = [];\r\n        if (this.state.needClick){\r\n            let indexes = this.randomShoot();\r\n            // if (this.state.type=='player'){\r\n            //     let square = document.querySelector(`#${this.state.type + indexes.index1 + 'х' + indexes.index2}`).firstChild.firstChild;\r\n            // }\r\n            listSquares1 = this.state.arraySquare.map((row, indexrow)=>{\r\n                return <div className=\"field__row\">     \r\n                            {row.map((item, index) => { \r\n                                    return <Square \r\n                                        id = {this.state.type + indexrow + 'х' + index}\r\n                                        findID = {this.state.type + indexes.index1 + 'х' + indexes.index2}\r\n                                        value = {item}\r\n                                        wasShoot = {true}\r\n                                        wasAlreadyShoot = {true}\r\n                                        type = {this.state.type}/>;\r\n                            })}\r\n                        </div>;     \r\n            });  \r\n            this.shootShip(undefined, `${indexes.index1}x${indexes.index2}`); // НЕ БЫЛО\r\n        }\r\n        else{\r\n            listSquares1 = this.state.arraySquare.map((row, indexrow)=>{\r\n                return <div className=\"field__row\">     \r\n                    {row.map((item, index) => { \r\n                        return <Square \r\n                            id = {this.state.type + indexrow + 'х' + index}\r\n                            value = {item}\r\n                            wasShoot = {false}\r\n                            wasAlreadyShoot = {false}\r\n                            type = {this.state.type}\r\n                            shootShip = {this.shootShip.bind(this)}/>;\r\n                    })}\r\n                        </div>;     \r\n            });  \r\n        }\r\n        return listSquares1;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let listSquares1 = this.createSquares();\r\n        return  <div className  = {'field' + ` field_${this.state.type}`}>\r\n                       {listSquares1} \r\n                </div>\r\n        }\r\n}","import React from 'react';\r\nexport class Square extends React.Component {\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {  id: props.id, \r\n                            key: props.id, \r\n                            value: props.value,\r\n                            wasShoot: props.wasShoot,\r\n                            wasAlreadyShoot: props. wasAlreadyShoot || false,\r\n                            type: props.type //тип - это клетки игрока или компьютера\r\n                        }\r\n        }\r\n    /**\r\n     * Обработчик события нажатия на квадратик \r\n     * @param {Event} e - событие нажатия на квадратик\r\n     */\r\n    handleClick(e){\r\n        if (this.state.wasAlreadyShoot==false){\r\n            this.setState({wasShoot : true, wasAlreadyShoot: true});\r\n            this.props.shootShip(e, this.state.id);\r\n        }\r\n        else {\r\n            //пока мы тут ничего не делаем, но может потом будем выводить сообщение мол сюда уже стреляли\r\n            alert(\"Вы уже стреляли в эту точку\"); \r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n        if (this.state.type == 'player'){\r\n            if (nextProps.findID){\r\n                if (this.state.id==nextProps.findID)\r\n                this.setState({wasShoot: true, wasAlreadyShoot: true}); \r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.type=='player'){ //поле игрока \r\n            return  <div className = {\"square field__square field__square_player\"} id = {this.state.id}>\r\n                            {this.state.value == 1 ? \r\n                                <div className=\"square__shoot_player\">\r\n                                    <img className = {this.state.wasShoot ? \"square__shoot\" : \"square__shoot disable\"} src = {'../img/dagger.png'}/>\r\n                                </div>\r\n                                : \r\n                                <div>\r\n                                    <img className = {this.state.wasShoot ? \"square__shoot\" : \"square__shoot disable\"} src = {'../img/dot.png'}/>\r\n                                </div>} \r\n                    </div>\r\n        }\r\n        else {  //поле компьютера\r\n            return  <div className = {\"square field__square field__square_computer\"} id = {this.state.id} onClick = {this.handleClick.bind(this)}>\r\n                            {this.state.value == 1 ? \r\n                                <img className = {this.state.wasShoot ? \"square__shoot\" : \"square__shoot disable\"} src = {'../img/dagger.png'}/> : \r\n                                <img className= {this.state.wasShoot ? \"square__shoot\" : \"square__shoot disable\"} src = {'../img/dot.png'}/>}\r\n                    </div>\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {Header, Field} from './componentsLib.js';\r\n// import './App.css';\r\n\r\nclass Battle extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            formIsActive: true,\r\n            whoseTurn: 'player',\r\n            needClick: props.needClick,\r\n            userFullName: 'You',\r\n            computerFullName: 'John',\r\n            fields: ['player' ,'computer']\r\n        }   \r\n    }\r\n    /**\r\n     * Функция обработчик нажатия по полю компьютера (игрок сделал свой ход, пора ходить компьютеру)\r\n     * @param {Event} event \r\n     */\r\n    computerStep(event){\r\n        console.log('computerStep');\r\n        this.setState({needClick: true});\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Компьютер сделал свой ход, пора ходить игроку\r\n     * @param {Event} event \r\n     */\r\n    computerStepEnd(){\r\n        console.log('computerStepEnd');\r\n        this.setState({needClick: false});\r\n        // event.stopPropagation();\r\n    }\r\n    /**\r\n     * Функция-обработчик изменений в поле ввода имени игрока\r\n     * @param {Event} event \r\n     */\r\n    userFullnameOnChange(event){\r\n        this.setState({userFullName: event.target.value});\r\n    }\r\n    /**\r\n     * Функция-обработчик изменений в поле ввода имени компьютера\r\n     * @param {Event} event \r\n     */\r\n    computerFullnameOnChange(event){\r\n        this.setState({computerFullName: event.target.value});\r\n    }\r\n    /**\r\n     * Функция-обработчик нажатия на кнопку \"К бою\"\r\n     * @param {Event} event \r\n     */\r\n    readNames(event){\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.setState({formIsActive: false});\r\n    }\r\n    /**\r\n     * Устанавливаем кто сейчас ходит (игрок или компьютер)\r\n     * @param {String} who \r\n     */\r\n    changeTurn(who){\r\n        this.setState({whoseTurn: who});\r\n    }\r\n\r\n    render() {\r\n        let strHi = (this.state.whoseTurn=='player')? 'Ваш ход, сударь ' + this.state.userFullName : 'Ходит компьютер ' + this.state.computerFullName;\r\n            return <div className=\"shell\">\r\n                    <Header title='Морской бой' description='Сыграем?' />  \r\n                    <form id=\"form-names\" className= {this.state.formIsActive? \"shell__form-names form-names\" : \"disable\"}>\r\n                        <p className=\"form-names__string\">\r\n                                <label className=\"form-names__label form-label\" htmlFor=\"input-add-fullname\">Введите ваше имя</label>\r\n                                <input className=\"form-names__input form-input\" id=\"input-user-fullname\" type = \"text\" placeholder=\"Введите ФИО человека\" value={this.state.userFullName} onChange={this.userFullnameOnChange.bind(this)}/>\r\n                        </p>\r\n                        <p className=\"form-names__string\">\r\n                                <label className=\"form-names__label form-label\" htmlFor=\"input-add-fullname\">Введите имя компьютера</label>\r\n                                <input className=\"form-names__label form-input\" id=\"input-computer-fullname\" type = \"text\" placeholder=\"Введите ФИО человека\" value={this.state.computerFullName} onChange={this.computerFullnameOnChange.bind(this)}/>\r\n                        </p>\r\n                        <p className=\"form-names__string\">\r\n                        <input className=\"form-names__button form-button\" type = \"submit\" id=\"add-person-button\" name=\"add-person-button\" value=\"К бою!\" onClick = {this.readNames.bind(this)}/>\r\n                        </p>\r\n                    </form>\r\n                    <div className = \"shell_whoIsNext\"> \r\n                        {strHi}\r\n                    </div>\r\n                    <div id=\"container\" className=\"shell__container\">\r\n                        <Field type='player' needClick = {this.state.needClick}\r\n                            computerStepEnd = {this.computerStepEnd.bind(this)}\r\n                            changeTurn = {this.changeTurn.bind(this)}/> \r\n                        <Field type='computer' needClick = {false}\r\n                            computerStep = {this.computerStep.bind(this)}\r\n                            computerStepEnd = {this.computerStepEnd.bind(this)}\r\n                            changeTurn = {this.changeTurn.bind(this)}/> \r\n                    </div>\r\n                </div>;   \r\n    }\r\n}\r\n\r\n\r\nexport default Battle;\r\n","import React from 'react';\nimport Battle from './Battle.js';\n// import './App.css';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            battle: [1]\n        }\n    }\n    /**\n     * обработчик для клика по кнопке \"начать заново\"\n     * @param {Event} event \n     */\n    newGame(event){\n        // event.stopPropagation();\n        // event.preventDefault();\n        // this.state.battle.splice(0,1);\n        // this.setState({battle:this.state.battle});\n        // this.state.battle.push(2);\n        // this.setState({battle:this.state.battle});\n    }\n    render() {\n        //пробовала сделать кнопку - не успела\n  \n    return <div>\n                {this.state.battle.map((battle)=> <Battle id={battle} needClick={false}/>)}\n                <div>\n                    <input className=\"shell__button form-button\" type = \"submit\" id=\"newStart\" value=\"Начать заново (я есть, но не работаю)\" onClick = {this.newGame.bind(this)}/>\n                </div>\n            </div>;   \n    }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App/>,\n  document.getElementById('wrapper')\n);\n"],"sourceRoot":""}